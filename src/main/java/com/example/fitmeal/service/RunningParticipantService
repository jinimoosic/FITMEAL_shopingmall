package com.example.fitmeal.service;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.example.fitmeal.domain.RunningParticipant;
import com.example.fitmeal.domain.RunningParticipantStatus;
import com.example.fitmeal.domain.RunningPost;
import com.example.fitmeal.domain.UserReport;
import com.example.fitmeal.domain.Users;
import com.example.fitmeal.repository.RunningParticipantRepository;
import com.example.fitmeal.repository.RunningPostRepository;
import com.example.fitmeal.repository.UserReportRepository;
import com.example.fitmeal.repository.UserRepository;

import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class RunningParticipantService {
    private final RunningParticipantRepository participantRepository;
    private final RunningPostRepository runningPostRepository;
    private final UserReportRepository userReportRepository;
    private final UserRepository usersRepository;

    //참여 
    @Transactional
    public boolean joinRunningPost(Integer postNum, Users user) {
        RunningPost post = runningPostRepository.findById(postNum)
                .orElseThrow(() -> new RuntimeException("게시글 없음"));
        
        if (post.isClosed()) {
            throw new RuntimeException("이미 마감된 모집입니다.");
        }


        Optional<RunningParticipant> existingOpt = participantRepository.findByPostAndUser(post, user);

        RunningParticipant participant;
        if (existingOpt.isPresent()) {
            participant = existingOpt.get();

            if (participant.getStatus() == RunningParticipantStatus.JOINED) {
                throw new RuntimeException("이미 참여 중입니다.");
            }

            participant.setStatus(RunningParticipantStatus.JOINED);
        } else {
            // 처음 참여
            participant = RunningParticipant.builder()
                    .post(post)
                    .user(user)
                    .status(RunningParticipantStatus.JOINED)
                    .build();
            participantRepository.save(participant);
        }

       

        updateCurrentParticipants(post);

        return true; // 참여 상태
    }

    //취소 
    @Transactional
    public boolean cancelParticipation(Integer postNum, Users user) {
        RunningPost post = runningPostRepository.findById(postNum)
                .orElseThrow(() -> new RuntimeException("게시글 없음"));

        System.out.println("참여자 취소 요청: " + user.getUserName());
        RunningParticipant participant = participantRepository.findByPostAndUserAndStatus(post, user, RunningParticipantStatus.JOINED)
                .orElseThrow(() -> new RuntimeException("참여 기록 없음"));

        // 작성자면 취소 불가
        if (participant.isHost()) {
            throw new RuntimeException("작성자는 참여를 취소할 수 없습니다.");
        }
        
        participant.setStatus(RunningParticipantStatus.CANCELLED);
        participantRepository.save(participant);
        System.out.println("참여자 상태 변경: " + participant.getStatus());

        updateCurrentParticipants(post);
        System.out.println("현재 참가자 수 업데이트 완료");
        return false; // 취소 상태
    }

    //현재 인원 카운트
    public int getCurrentParticipants(Integer postNum) {
        RunningPost post = runningPostRepository.findById(postNum)
                .orElseThrow(() -> new RuntimeException("게시글 없음"));
        return (int) participantRepository.countByPostAndStatus(post, RunningParticipantStatus.JOINED);
    }

    // 모집글의 현재 인원 업데이트 + 마감 여부 
    private void updateCurrentParticipants(RunningPost post) {
        int currentCount = (int) participantRepository.countByPostAndStatus(post, RunningParticipantStatus.JOINED);
        post.setCurrentParticipants(currentCount);
        
        if (post.getMaxParticipants() != null) {
            post.setClosed(currentCount >= post.getMaxParticipants());
        } else {
            post.setClosed(false);
        }
        
        runningPostRepository.save(post);
    }
    
    @Transactional(readOnly = true)
    public boolean isJoined(RunningPost post, Users user) {
        return participantRepository.existsByPostAndUserAndStatus(post, user, RunningParticipantStatus.JOINED);
    }
    
    public boolean isHost(RunningPost post, Users user) {
        return participantRepository.findByPostAndUser(post, user)
                .map(RunningParticipant::isHost)
                .orElse(false);
    }
    
    // 참가자 목록 조회
  
    @Transactional(readOnly = true)
    public List<Users> getActiveParticipants(Integer postNum) {
        RunningPost post = runningPostRepository.findById(postNum)
                .orElseThrow(() -> new IllegalArgumentException("Invalid postNum: " + postNum));

    	
        List<RunningParticipant> participants = participantRepository.findByPostAndStatus(post, RunningParticipantStatus.JOINED);
        
        // 참가자 목록에서 isBlocked가 false인 유저만 필터링
        return participants.stream()
                .map(RunningParticipant::getUser)
                .filter(user -> !user.isBlocked())
                .collect(Collectors.toList());
    }
    
    //신고기능

    @Transactional
    public void reportUser(Integer reporterUserNum, Integer reportedUserNum, String reason, Integer postNum) {
        System.out.println("[REPORT_SERVICE] 1. reportUser 메서드 진입");

        // findById()가 실패하면 여기서 예외 발생
        Users reporter = usersRepository.findById(reporterUserNum)
                .orElseThrow(() -> new RuntimeException("신고자 없음"));
        Users reportedUser = usersRepository.findById(reportedUserNum)
                .orElseThrow(() -> new RuntimeException("신고 대상 유저 없음"));

        System.out.println("[REPORT_SERVICE] 2. 신고자와 대상 유저 객체 조회 완료");
        
        // 이 부분이 올바르게 작동하는지 확인
        Optional<UserReport> existingReport = userReportRepository.findByReporterAndReported(reporter, reportedUser);
        System.out.println("[REPORT_SERVICE] 3. 기존 신고 내역 조회 결과: " + existingReport.isPresent());
        
        if (existingReport.isPresent()) {
            System.out.println("[REPORT_SERVICE] 4. 중복 신고가 존재하여 예외 발생");
            throw new RuntimeException("이미 신고하셨습니다.");
        }

        System.out.println("[REPORT_SERVICE] 5. 중복 신고 없음. 경고 횟수 증가 로직 시작");
        reportedUser.addWarningCount(1);
        usersRepository.save(reportedUser);
        System.out.println("[REPORT_SERVICE] 6. 유저 정보 저장 완료. 경고 횟수: " + reportedUser.getWarnCount());

        UserReport report = UserReport.builder()
                .reporter(reporter)
                .reported(reportedUser)
                .reason(reason)
                .status("PENDING")
                .postNum(postNum)
                .build();
        
        userReportRepository.save(report);
        System.out.println("[REPORT_SERVICE] 7. 신고 내역 저장 완료");
    }

}
