// src/main/java/com/example/fitmeal/controller/RunningController.java
package com.example.fitmeal.controller;

import java.time.LocalDateTime;
import java.util.Collections;
import java.util.List;
import java.util.Map;

import org.springframework.data.domain.Page;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.example.fitmeal.domain.RunningCourse;
import com.example.fitmeal.domain.RunningCoursePoint;
import com.example.fitmeal.domain.RunningPost;
import com.example.fitmeal.domain.Users;
import com.example.fitmeal.dto.RunningPostDTO;
import com.example.fitmeal.repository.RunningCoursePointRepository;
import com.example.fitmeal.repository.RunningCourseRepository;
import com.example.fitmeal.repository.RunningParticipantRepository;
import com.example.fitmeal.repository.RunningPostRepository;
import com.example.fitmeal.security.CustomUserDetails;
import com.example.fitmeal.service.RunningParticipantService;
import com.example.fitmeal.service.RunningPostService;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;

import lombok.RequiredArgsConstructor;

@Controller
@RequestMapping("/community/running")
@RequiredArgsConstructor
public class RunningController {

    private final RunningPostService postService;
    private final RunningPostRepository postRepo;
    private final RunningCourseRepository courseRepo;
    private final RunningCoursePointRepository pointRepo;
    private final ObjectMapper objectMapper;
    private final RunningParticipantService participantService;
    private final RunningParticipantRepository participantRepository;

    // 목록
    @GetMapping
    public String list(@RequestParam(value = "page", defaultValue = "0") int page,
    		@RequestParam(value = "keyword", required = false) String keyword, Model model) {
        Page<RunningPost> paging;
        
        if(keyword !=null && !keyword.isBlank()) {
        	paging = postService.searchList(page, keyword);
        }else {
        	paging = postService.getList(page);
        }
        
        model.addAttribute("paging", paging);
        model.addAttribute("posts", paging.getContent());
        model.addAttribute("category", "running");        
        model.addAttribute("keyword",keyword == null ? "" : keyword);
        return "running";
    }

 // 상세
    @GetMapping("/run_detail/{postNum}")
    public String detail(@PathVariable("postNum") Integer postNum,
                         @AuthenticationPrincipal CustomUserDetails userDetails,
                         Model model) {

        // 로그인 여부 확인 및 유저 객체 가져오기
        Users user = null;
        if (userDetails != null) {
            user = userDetails.getUser();
        }
        
        // 글 조회
        RunningPost post = postRepo.findById(postNum)
                .orElseThrow(() -> new IllegalArgumentException("해당 글이 없습니다. postNum=" + postNum));

        // 코스 조회
        RunningCourse course = courseRepo.findByPostNum(postNum).orElse(null);

        // 코스 포인트 조회
        List<RunningCoursePoint> points = Collections.emptyList();
        if (course != null) {
            points = pointRepo.findByRunningCourseOrderBySequenceAsc(course);
        }

        // points를 JSON 문자열로 변환
        String pointsJson = "[]";
        try {
            pointsJson = objectMapper.writeValueAsString(
                    points.stream()
                          .map(p -> Map.of("lat", p.getLatitude(), "lng", p.getLongitude()))
                          .toList()
            );
        } catch (JsonProcessingException e) {
            e.printStackTrace();
        }

        // HH:mm 문자열
        String startTimeStr = post.getStartTime() != null ? post.getStartTime().toLocalTime().toString() : null;
        String endTimeStr   = post.getEndTime() != null ? post.getEndTime().toLocalTime().toString() : null;

        // 참가자 목록 조회
        List<Users> participants = participantService.getActiveParticipants(postNum); 

        // 모델에 공통 데이터 추가
        model.addAttribute("post", post);
        model.addAttribute("course", course);
        model.addAttribute("points", points);
        model.addAttribute("pointsJson", pointsJson);
        model.addAttribute("startTimeStr", startTimeStr);
        model.addAttribute("endTimeStr", endTimeStr);
        model.addAttribute("category", "running");
        model.addAttribute("user", user);
        model.addAttribute("participants", participants);
        
        // 로그인 여부 + 참여 여부 + 호스트 여부
        boolean joined = false;
        boolean isHost = false;
        if (user != null) {
            joined = participantService.isJoined(post, user);
            isHost = participantService.isHost(post, user);
        }
        model.addAttribute("joined", joined);
        model.addAttribute("isHost", isHost);

        // 삭제 권한 
        boolean canDelete = false;
        if (user != null && post.getUser() != null) {
            // 1. 로그인한 유저가 글 작성자인지 확인
            boolean isAuthor = post.getUser().getUserNum().equals(user.getUserNum());
            long realParticipantsCount = participants.stream()
                    .filter(p -> !p.getUserNum().equals(post.getUser().getUserNum()))
                    .count();

            // 2. 작성자이며, 다른 참가자가 없을 때 (realParticipantsCount == 0)
            canDelete = isAuthor && (realParticipantsCount == 0);
                    }
                    model.addAttribute("canDelete", canDelete);
        
        
                    return "run_detail";
                }


    // 작성 폼 (로그인 필요)
    @GetMapping("/run_new")
    public String create(@AuthenticationPrincipal CustomUserDetails userDetails, Model model) {
        if (userDetails == null) {
            return "redirect:/users/login"; // 로그인 안하면 로그인 페이지로
        }
        Users user = userDetails.getUser();
        
        if (user.isBlocked()) {
            model.addAttribute("message", "신고 누적으로 인해 글 작성이 제한되었습니다.");
            return "block_page"; 
        }
        
        
        model.addAttribute("runningPostDTO", new RunningPostDTO());
        model.addAttribute("category", "running");
        model.addAttribute("user", user);

        return "run_new";
    }

    // 저장 (로그인 필요)
    @PostMapping("/run_new")
    public String createPost(@AuthenticationPrincipal CustomUserDetails userDetails,
                             @ModelAttribute RunningPostDTO dto,
                             Model model) {
        if (userDetails == null) {
            return "redirect:/users/login";
        }

        Users user = userDetails.getUser();
        
        
        if (user.isBlocked()) {
            model.addAttribute("message", "신고 누적으로 인해 글 작성이 제한되었습니다.");
            return "block_page";
        }
        

        dto.setUserNum(user.getUserNum()); 

        // 필수 체크
        if (dto.getTitle() == null || dto.getTitle().isBlank()
                || dto.getContent() == null || dto.getContent().isBlank()
                || dto.getDate() == null
                || dto.getStartTimeOnly() == null || dto.getEndTimeOnly() == null) {
            model.addAttribute("formError", "제목/내용/날짜/시간은 필수입니다.");
            model.addAttribute("runningPostDTO", dto);
            model.addAttribute("category", "running");
            return "run_new";
        }

        // 날짜 + 시간 합치기
        dto.setStartTime(LocalDateTime.of(dto.getDate(), dto.getStartTimeOnly()));
        dto.setEndTime(LocalDateTime.of(dto.getDate(), dto.getEndTimeOnly()));

        try {
            Integer newPostNum = postService.createPost(dto);
            return "redirect:/community/running/run_detail/" + newPostNum;
        } catch (Exception e) {
            model.addAttribute("formError", "등록 실패: " + e.getMessage());
            model.addAttribute("runningPostDTO", dto);
            model.addAttribute("category", "running");
            return "run_new";
        }
    }

 // 삭제 처리
    @PostMapping("/run_delete/{postNum}")
    public String deletePost(@PathVariable("postNum") Integer postNum,
                             @AuthenticationPrincipal CustomUserDetails userDetails) {
        if (userDetails == null) {
            return "redirect:/users/login";
        }

        RunningPost post = postRepo.findById(postNum)
                .orElseThrow(() -> new IllegalArgumentException("해당 글이 없습니다. postNum=" + postNum));

        Users currentUser = userDetails.getUser();

        //작성자이면서 참여자가 없는 경우에만 삭제 가능
        List<Users> participants = participantService.getActiveParticipants(postNum);
        boolean hasOtherParticipants = participants != null && participants.size() > 1;

        if (post.getUser() == null || !post.getUser().getUserNum().equals(currentUser.getUserNum()) || hasOtherParticipants) {
            return "redirect:/community/running/run_detail/" + postNum + "?error=noPermission";
        }

        try {
            postService.deletePost(postNum);
            return "redirect:/community/running";
        } catch (Exception e) {
            // 삭제 실패 시 상세 페이지로 돌아가며 에러 메시지 전달
            return "redirect:/community/running/run_detail/" + postNum + "?error=deleteFailed";
        }
    }
    
    
}
