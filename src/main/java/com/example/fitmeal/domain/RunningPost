package com.example.fitmeal.domain;

import java.time.LocalDate;
import java.time.LocalDateTime;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.OneToOne;
import jakarta.persistence.PrePersist;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Entity
@Getter
@Setter
@Table(name = "running_post")
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class RunningPost {

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	@Column(name = "post_num")
	private Integer postNum;
	
	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "user_num")
	private Users user;
	
	@Column(length = 255, nullable = false)
	private String title;
	
	@Column(columnDefinition = "TEXT", nullable = false)
	private String content;
	
	@Column(name = "location_lat", length = 255)
	private String locationLat;
	
	@Column(name = "location_lng", length = 255)
	private String locationLng;
	
	private LocalDate date;
	
	@Column(name = "start_time")
	private LocalDateTime startTime;
	
	@Column(name = "end_time")
	private LocalDateTime endTime;
	
	@Column(name = "max_participants")
	private Integer maxParticipants;
	
	@Builder.Default
	@Column(name = "current_participants", nullable = false)
	private Integer currentParticipants = 0;
	
	@Builder.Default
	@Column(name = "is_closed", nullable = false)
	private boolean isClosed = false;
	
	@Column(name = "create_date", nullable = false, updatable = false)
	private LocalDateTime createDate;
	
	@OneToOne(mappedBy = "runningPost", fetch = FetchType.LAZY)
	private RunningCourse runningCourse;


	@Column(length = 255, nullable = true)
	private String address;  // 러닝 장소

	
	
	@PrePersist
	public void prePersist() {
		this.createDate = LocalDateTime.now();
		 if (this.createDate == null) this.createDate = LocalDateTime.now();
	        if (this.currentParticipants == null) this.currentParticipants = 0;
	}
	
	public String getShortAddress() {
	    if (address == null || address.isBlank()) {
	        return ""; 
	    }

	    String[] parts = address.split(" ");
	    
	    // 세종특별자치시 
	    if (parts[0].contains("세종특별자치시")) {
	        return "세종특별자치시";
	    }

	    // 일반 케이스: 시/도 + 시군구 + 동
	    int end = Math.min(parts.length, 3); 
	    return String.join(" ", java.util.Arrays.copyOfRange(parts, 0, end));
	}

}
